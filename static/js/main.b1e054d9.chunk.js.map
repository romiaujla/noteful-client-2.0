{"version":3,"sources":["Component/Header/Header.js","NotefulContext.js","Component/SideBarNavigation/FolderNotesList/FolderNotesList.js","Component/SideBarNavigation/SideBarNavigation.js","Component/NotesSection/NotesSection.js","Component/Note/Note.js","ValidationError.js","Component/AddFolder/AddFolder.js","Component/AddNote/AddNote.js","App.js","index.js"],"names":["Header","className","role","to","Component","defaultProps","handleAddFolder","handleAddNote","React","createContext","notes","folders","fetchURL","deleteNote","addNote","addFolder","setFolderPageError","fodlerPageError","setNotePageError","notePageError","FolderNotesList","this","context","noteId","props","rprops","match","params","folderId","currentFolder","length","find","note","id","folder","notesList","map","key","name","undefined","contextType","NotefulContext","SideBarNavigation","handleGoBack","history","hasOwnProperty","push","goBack","currentPath","location","pathname","folderHTML","includes","onClick","exact","path","render","NotesSection","onDeleteNote","fetch","method","headers","then","res","ok","json","err","data","catch","error","console","log","notesHeader","notesHTML","date","modified","format","Note","content","ValidationError","message","AddFolder","validateFolderName","folderNameInput","current","value","trim","handleAddFolderSumbit","e","preventDefault","folderName","options","body","JSON","stringify","Error","createRef","folderPageError","onSubmit","htmlFor","type","placeholder","ref","onChange","required","aria-label","aria-required","aria-invalid","hasError","errorMessage","disabled","AddNote","validateInput","noteName","nameInputBox","selectedFolder","nameErrorMessage","fodlerSelectErrorMessage","handleSubmit","folderList","App","updateFolders","setFolders","state","updateNotes","setNotes","handleDeleteNote","filter","setState","url","Promise","resolve","reject","response","notesJson","responseJson","componentDidMount","endpoint","all","renderSideNavRoutes","i","renderNotesSectionRoutes","renderNoteRoute","API_KEY","process","Provider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b1e054d9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Header.css';\nimport {Link} from 'react-router-dom';\n\nexport default class Header extends Component {\n    render(){\n        return (\n            <header className='Header'>\n                <div className='app-title'>\n                    <h1 role='link'><Link to='/'>Noteful</Link></h1>\n                </div>\n                <div className='header-btns'>\n                    <Link to='/add-folder/'\n                        className='app-btn add-folder-btn'>\n                            Add Folder +\n                    </Link>\n                    <Link to='/add-note/'\n                        className='app-btn add-note-btn'>\n                            Add Note +\n                    </Link>\n                </div>\n            </header>\n        );\n    }\n}\n\nHeader.defaultProps = {\n    handleAddFolder: () => {},\n    handleAddNote: () => {}\n}","import React from 'react';\n\nexport default React.createContext({\n    notes: [],\n    folders: [],\n    fetchURL: '', \n    deleteNote: () => {},\n    addNote: () => {},\n    addFolder: () => {},\n    setFolderPageError: () => {},\n    fodlerPageError: {},\n    setNotePageError: () => {},\n    notePageError: {}\n});","import React, {Component} from 'react';\nimport NotefulContext from '../../../NotefulContext';\nimport './FolderNotesList.css';\nimport {Link} from 'react-router-dom';\n\nexport default class FolderNotesList extends Component {\n\n    static contextType = NotefulContext;\n\n    render(){\n\n        const {notes} = this.context;\n        const {folders} = this.context;\n        const {noteId} = this.props.rprops.match.params;        \n        let folderId = '';\n        let currentFolder = {};\n        if(notes.length !== 0 && folders.length !== 0){\n            folderId = notes.find((note) => note.id === noteId).folderId;\n            currentFolder = folders.find((folder) => folder.id === folderId);\n        }\n        const notesList = notes.map((note) => {\n            if(note.folderId === folderId){\n                return (\n                    <Link \n                        to={`/notes/${note.id}`}\n                        key={note.id}><li \n                        className={(note.id === noteId)? 'app-btn active' : 'app-btn'}>\n                        {note.name}\n                    </li></Link>\n                )\n            }else{\n                return '';\n            }\n        })\n        // history.push(`/folders/${folderId}`);\n\n        return (\n            <nav className='FolderNotesListNav'>\n                <h1>{(currentFolder.name !== undefined) ? currentFolder.name : ''}</h1>\n                <ul className='notes-list'>\n                    {notesList}\n                </ul>\n            </nav>\n        );\n    }\n\n}","import React, {Component} from 'react';\nimport './SideBarNavigation.css';\nimport NotefulContext from '../../NotefulContext';\nimport {Route, Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport FolderNotesList from './FolderNotesList/FolderNotesList';\n\nexport default class SideBarNavigation extends Component {\n    \n    static contextType = NotefulContext;\n\n    handleGoBack = () => {\n        const {history} = this.props.rprops;\n        const {notes} = this.context;\n        if(this.props.rprops.match.params.hasOwnProperty('noteId'))\n        {\n            let {noteId} = this.props.rprops.match.params;\n            if(noteId !== undefined){\n                const note = notes.find((note) => note.id === noteId);\n                history.push(`/folders/${note.folderId}`);\n            }\n        }else{\n            history.goBack();\n        }\n    }\n\n    render(){\n\n        const currentPath = this.props.rprops.location.pathname;\n        const {folderId} = this.props.rprops.match.params;\n        const {folders} = this.context;\n        const folderHTML = folders.map((folder) => {\n            return (\n                <li \n                    key={folder.id}\n                    className={(folderId === folder.id)? 'selected' : ''}>\n                    <Link to={`/folders/${folder.id}`}>\n                        <div className='folder-link app-btn'>\n                            {folder.name}\n                        </div>\n                    </Link>\n                </li>\n            );\n        });\n\n\n        // Will return the folder\n        return (\n            <aside className='SideBarNavigation'>\n                {(currentPath === '/' || currentPath.includes('/folders/'))\n                    ? (\n                        <nav className='folder-nav'>\n                            <h3>Folder List</h3>\n                            <ul className='folder-list'>\n                                {folderHTML}\n                            </ul>\n                        </nav>\n                    )\n                    : (\n                        <nav className='go-back-nav'>\n                            <button \n                                className='app-btn'\n                                onClick={() => {this.handleGoBack()}}\n                            >\n                                Go Back\n                            </button>\n                            <Route \n                                exact\n                                path='/notes/:noteId'\n                                render={(rprops) => <FolderNotesList rprops={rprops} />}\n                            />\n                        </nav>\n                    )\n                }\n            </aside>\n        );\n    }\n}\n\nSideBarNavigation.defaultProps = {\n    rprops: {}\n}\n\nSideBarNavigation.propTypes = {\n    rprops: PropTypes.object.isRequired\n}","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './NotesSection.css';\nimport NotefulContext from '../../NotefulContext';\nimport Moment from 'react-moment';\n\nexport default class NotesSection extends Component {\n    \n    static contextType = NotefulContext;\n\n    onDeleteNote = (noteId) => {\n        const {fetchURL} = this.context;\n        fetch(`${fetchURL}/notes/${noteId}`, {\n            method: 'DELETE',\n            headers: {\n                'content-type': 'application/json'\n            },\n        }).then(res => {\n            if(!res.ok){\n                return res.json().then((err) => {\n                    throw err\n                })\n            }\n            return res.json();\n        }).then(data => {\n            this.context.deleteNote(noteId);\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    render(){\n\n        const {rprops} = this.props;\n        const {notes} = this.context;\n        const {folders} = this.context;\n        let notesHeader = 'Empty Folder';\n        const currentPath = rprops.location.pathname;\n\n        let notesHTML = notes.map((note) => {\n            // Display ALL Notes on '/' path\n            if(currentPath === '/'){\n                notesHeader = 'All Notes';\n                return (\n                    <li key={note.id}>\n                        <div>\n                            <h4><Link to={`/notes/${note.id}`}>{note.name}</Link></h4>\n                            <p className='note-last-modified'>Date Modified: <Moment date={note.modified} format=\"MM/DD/YYYY\" />\n                            </p>\n                        </div>\n                        <div>\n                            <button \n                                className='delete-btn app-btn'\n                                onClick={() => {this.onDeleteNote(note.id)}}\n                            >delete</button>\n                        </div>\n                    </li>\n                );\n            }else{ \n                // Display notes when folder is selected\n                const {folderId} = rprops.match.params;\n                if(note.folderId === folderId){\n                    if(folders.length !== 0){\n                        notesHeader = folders.find((folder) => folder.id === folderId).name + ' Folder Notes';\n                    }else{\n                        notesHeader = 'No Notes';\n                    }\n                    return (\n                        <li key={note.id}>\n                            <div>\n                                <h4><Link to={`/notes/${note.id}`}>{note.name}</Link></h4>\n                                <p className='note-last-modified'>Date Modified: <Moment date={note.modified} format=\"MM/DD/YYYY\" />\n                                </p>\n                            </div>\n                            <div>\n                                <button \n                                    className='delete-btn app-btn'\n                                    onClick={() => {this.context.deleteNote(note.id)}}\n                                >delete</button>\n                            </div>\n                        </li>\n                    );\n                }\n                return '';\n            }\n        })\n        \n\n        return (\n            <section className='NotesSection'>\n                <h3>{notesHeader}</h3>\n                <ul className='notes-list'>\n                    {notesHTML}\n                </ul>\n            </section>\n        )\n    }\n}\n\nNotesSection.defaultProps = {\n    rprops: {}\n}","import React, {Component} from 'react';\nimport './Note.css';\nimport NotefulContext from '../../NotefulContext';\nimport PropTypes from 'prop-types';\n\nexport default class Note extends Component {\n    \n    static contextType = NotefulContext;\n\n    onDeleteNote = (noteId) => {\n        const {fetchURL} = this.context;\n        fetch(`${fetchURL}/notes/${noteId}`, {\n            method: 'DELETE',\n            headers: {\n                'content-type': 'application/json'\n            },\n        }).then(res => {\n            if(!res.ok){\n                return res.json().then((err) => {\n                    throw err\n                })\n            }\n            return res.json();\n        }).then(data => {\n            this.props.rprops.history.push('/');\n            this.context.deleteNote(noteId);\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    render(){\n\n        const {notes} = this.context;\n        const {noteId} = this.props.rprops.match.params;\n        const note = notes.find((note) => note.id === noteId);\n\n\n        return (\n            <section className='Note'>\n                {(note !== undefined) && \n                    <>\n                        <div className='note-header'>\n                            <h3 className='note-title'>{note.name}</h3>\n                            <button \n                                className='delete-btn app-btn'\n                                onClick={() => this.onDeleteNote(note.id)}\n                            >\n                                Delete\n                            </button>\n                        </div>\n                        <div className='note-content'>\n                            <p>{note.content}</p>\n                        </div>\n                    </>\n                }\n            </section>\n        )\n    }\n}\n\nNote.defaultProps = {\n    rprops: {}\n}\n\nNote.propTypes = {\n    rprops: PropTypes.object.isRequired\n}","import React from 'react';\n\nexport default function ValidationError(props){\n    if(props.message){\n        return (\n            <div className='error'>\n                {props.message}\n            </div>\n        );\n    }\n\n    return <></>;\n}","import React, {Component} from 'react';\nimport './AddFolder.css';\nimport NotefulContext from '../../NotefulContext';\nimport ValidationError from '../../ValidationError';\n\nexport default class AddFolder extends Component {\n\n    static contextType = NotefulContext;\n    \n    constructor(props){\n        super(props);\n        this.folderNameInput = React.createRef();\n    }\n\n    // Every time load the Component in a default state\n    componentDidMount(){\n        this.context.setFolderPageError(false, ``);\n        this.folderNameInput.current.value = ``;\n    }\n\n    \n    // Validate the Folder Name as the value keeps changing\n    validateFolderName = () => {\n\n        // Trim the value, as the folder name cannot be empty spaces\n        const folderName = this.folderNameInput.current.value.trim();\n\n        if(folderName.length === 0){\n            // Handle error for incorrect folder name\n            this.context.setFolderPageError(true, `Folder name is required`);\n        }else{\n            // when a valid folder name is entered\n            this.context.setFolderPageError(false, ``);\n        }\n    }\n\n    // Handle the Submit of the form, also checks for errors\n    handleAddFolderSumbit = (e) => {\n        e.preventDefault();\n        const folderName = this.folderNameInput.current.value;\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: folderName\n            })\n        }\n\n        fetch(`${this.context.fetchURL}/folders`, options)\n            .then((res) => {\n                if(!res.ok){\n                    throw new Error(`Folder could not be added`);\n                }\n                return res;\n            })\n            .then((data) => {\n                this.folderNameInput.current.value = '';\n                this.context.addFolder();\n                this.context.setFolderPageError(false, ``);\n                this.props.rprops.history.push('/');\n            })\n            .catch((err) => {\n                console.log(err.message);\n            })\n        \n        \n    }\n\n    render(){\n        const {folderPageError} = this.context;\n\n        return (\n            <div className='AddFolder'>\n                <form className='add-folder-form' onSubmit={(e)=> {this.handleAddFolderSumbit(e)}}>\n                    <label htmlFor='foldername'>Folder Name</label>\n                    <div className='input-div'>\n                        <input \n                            type='text' \n                            placeholder='Enter your folder name here' \n                            id='foldername'\n                            name='foldername'\n                            className='foldername-textbox'\n                            ref={this.folderNameInput}\n                            onChange={() => {this.validateFolderName()}}\n                            required\n                            aria-label='folder name'\n                            aria-required='true'\n                            aria-invalid={folderPageError.hasError}\n                            />\n                    </div>\n                    <ValidationError message={folderPageError.errorMessage} />\n                    <div className='add-btn-div'>\n                        <button \n                            type='submit' \n                            className='app-btn'\n                            disabled={folderPageError.hasError}>\n                            Add Folder\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nAddFolder.defaultProps = {\n    rprops: {},\n    error: true\n}","import React, { Component } from 'react';\nimport './AddNote.css';\nimport NotefulContext from '../../NotefulContext';\nimport ValidationError from '../../ValidationError';\n\nexport default class AddNote extends Component {\n\n    static contextType = NotefulContext;\n\n    constructor(props) {\n        super(props);\n        this.nameInputBox = React.createRef();\n        this.content = React.createRef();\n        this.selectedFolder = React.createRef();\n    }\n\n    // load component with the default state, \n    // without showing prveious errors\n    componentDidMount(){\n        this.nameInputBox.current.value = ``;\n        this.selectedFolder.current.value = `none`;\n        this.content.current.value = ``;\n        this.context.setNotePageError(false,``,``);\n    }\n\n    validateInput = () => {\n        const { setNotePageError } = this.context;\n        const noteName = this.nameInputBox.current.value.trim();\n        const selectedFolder = this.selectedFolder.current.value;\n        const notePageError = {\n            hasError: false,\n            nameErrorMessage: ``,\n            fodlerSelectErrorMessage: ``,    \n        }\n        if(noteName.length === 0){\n            notePageError.hasError = true;\n            notePageError.nameErrorMessage = `Name is required`;\n        }\n        if(selectedFolder === 'none'){\n            notePageError.hasError = true;\n            notePageError.fodlerSelectErrorMessage = `Select the folder to save the note in.`\n        }\n        setNotePageError(notePageError);\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.validateInput();\n        if(!this.context.notePageError.hasError){\n            const noteName = this.nameInputBox.current.value.trim();\n            const content = this.content.current.value;\n            const selectedFolder = this.selectedFolder.current.value;\n            const options = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: noteName,\n                    folderId: selectedFolder,\n                    content: content\n                })\n            }\n\n            fetch(`${this.context.fetchURL}/notes`, options)\n                .then((res) => {\n                    if(!res.ok){\n                        throw new Error(`Could not add the note at this time`);\n                    }\n                    return res;\n                })\n                .then((data) => {\n                    this.context.addNote();\n                    this.props.rprops.history.push('/');\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n        }\n    }\n\n    render() {\n\n        const { folders, notePageError } = this.context;\n        const folderList = folders.map(\n            (folder) => {\n                return (\n                    <option\n                        value={folder.id}\n                        key={folder.id}\n                    >\n                        {folder.name}\n                    </option>)\n            });\n\n        return (\n            <div className='AddNote'>\n                <form className='add-note-form' onSubmit={(e) => {this.handleSubmit(e)}}>\n                    <label htmlFor='note-name'>\n                        <span className='required-label'>*</span> Note Name\n                    </label>\n                    <div className='input-div'>\n                        <input\n                            required\n                            id='note-name'\n                            name='note-name'\n                            className='note-name'\n                            placeholder='Enter the name of your note'\n                            ref={this.nameInputBox}\n                            onChange={() => {this.validateInput()}}\n                        />\n                    </div>\n                    <ValidationError message={notePageError.nameErrorMessage} />\n                    <label htmlFor='note-content' className='text-box-header'>\n                        Note Content\n                    </label>\n                    <div className='input-div'>\n                        <textarea\n                            id='note-content'\n                            name='note-content'\n                            placeholder='Enter your Note Content Here...'\n                            ref={this.content}\n                        />\n                    </div>\n                    <label htmlFor='folder-select'>\n                    <span className='required-label'>*</span> Select Folder\n                    </label>\n                    <select\n                        id='folder-select'\n                        name='folder-select'\n                        ref={this.selectedFolder}\n                        onChange={() => {this.validateInput()}}\n                    >\n                        <option value='none'>Select One...</option>\n                        {folderList}\n                    </select>\n                    <ValidationError message={notePageError.fodlerSelectErrorMessage} />\n                    <div className=''>\n                        <button\n                            className='app-btn'\n                            disabled={notePageError.hasError}\n                        >Add Note</button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Header from './Component/Header/Header';\nimport NotefulContext from './NotefulContext';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport SideBarNavigation from './Component/SideBarNavigation/SideBarNavigation';\nimport NotesSection from './Component/NotesSection/NotesSection';\nimport Note from './Component/Note/Note';\nimport AddFolder from './Component/AddFolder/AddFolder';\nimport AddNote from './Component/AddNote/AddNote';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n      folders: [],\n      API_KEY: process.env.REACT_APP_API_KEY,\n      fetchURL: `http://localhost:9090`,\n      folderPageError: {\n        hasError: false,\n        errorMessage: ``\n      },\n      notePageError: {\n        hasError: false,\n        nameErrorMessage: ``,\n        fodlerSelectErrorMessage: ``,\n      }\n    }\n  }\n\n  updateFolders = () => {\n    this.setFolders(`${this.state.fetchURL}/folders/`);\n  }\n\n  updateNotes = () => {\n    this.setNotes(`${this.state.fetchURL}/notes/`);\n  }\n\n  handleDeleteNote = (noteId) => {\n    const notes = this.state.notes.filter(note => note.id !== noteId);\n    this.setState({\n      notes\n    })\n  }\n\n  setFolderPageError = (hasError, errorMessage) => {\n    this.setState({\n      folderPageError: {\n        hasError,\n        errorMessage\n      }\n    })\n  }\n\n  setNotePageError = (notePageError) => {\n    this.setState({\n      notePageError\n    })\n  }\n\n  // Sets Notes from the API\n  setNotes = (url) => {\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            reject('Could Not Fetch Notes From API');\n          }\n          return response.json();\n        })\n        .then((notesJson) => {\n          resolve(notesJson);\n        })\n    }).then((notes) => {\n      this.setState({\n        notes\n      })\n    }).catch(err => {\n      console.log(err);\n    })\n\n  }\n\n  // Sets the folders from the API\n  setFolders = (url) => {\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            reject('Error: Could Not Fetch Folders From API');\n          }\n          return response.json();\n        })\n        .then((responseJson) => {\n          resolve(responseJson);\n        })\n    }).then((folders) => {\n      this.setState({\n        folders\n      })\n    }).catch((err) => {\n      console.log(err);\n    })\n  }\n\n  // Set Notes and Folders once the Component Did Mount\n  componentDidMount = () => {\n    const endpoint = this.state.fetchURL;\n    Promise.all([\n      this.setNotes(`${endpoint}/notes/`),\n      this.setFolders(`${endpoint}/folders/`)\n    ]).then(([res1, res2]) => {\n    })\n    .catch(err => {\n      console.log(err.message);\n    })\n  }\n\n  // Renders Routes for the Side Navigation\n  renderSideNavRoutes = () => {\n    const paths = [\n      '/',\n      '/folders/:folderId',\n      '/add-folder/',\n      '/add-note/',\n      '/notes/:noteId'\n    ];\n\n    const sideNavRoutes = paths.map((path, i) => {\n      return (\n        <Route\n          exact\n          key={i}\n          path={path}\n          render={(rprops) => <SideBarNavigation rprops={rprops} />}\n        />\n      );\n    });\n\n    return sideNavRoutes;\n  }\n\n  // Renders Routes for the Main Section where Notes are displayed\n  renderNotesSectionRoutes = () => {\n    const paths = [\n      '/',\n      '/folders/:folderId'\n    ];\n\n    const notesSectionRoutes = paths.map((path, i) => {\n      return (\n        <Route\n          key={i}\n          exact\n          path={path}\n          render={(rprops) => <NotesSection rprops={rprops} />}\n        />\n      );\n    });\n\n    return notesSectionRoutes;\n  }\n\n  // Render Rout for the detailed Note wth its Content\n  renderNoteRoute = () => {\n    const paths = [\n      '/notes/:noteId'\n    ];\n\n    const notesSectionRoutes = paths.map((path, i) => {\n      return (\n        <Route\n          key={i}\n          exact\n          path={path}\n          render={(rprops) => <Note rprops={rprops} />}\n        />\n      );\n    });\n\n    return notesSectionRoutes;\n  }\n\n\n  // Main React Render Method()\n  render() {\n\n    // Used to set the Context = State, to avoid a lot of prop drilling.\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      fetchURL: this.state.fetchURL,\n      deleteNote: this.handleDeleteNote,\n      addFolder: this.updateFolders,\n      addNote: this.updateNotes,\n      setFolderPageError: this.setFolderPageError,\n      folderPageError: this.state.folderPageError,\n      setNotePageError: this.setNotePageError,\n      notePageError: this.state.notePageError\n    }\n\n    return (\n      <NotefulContext.Provider value={value}>\n        <BrowserRouter>\n          <main className='App'>\n            <Header\n            />\n            <div className='flex-div'>\n              {this.renderSideNavRoutes()}\n              {this.renderNotesSectionRoutes()}\n              {this.renderNoteRoute()}\n              \n              <Route\n                exact\n                path='/add-folder/'\n                render={(rprops) => <AddFolder rprops={rprops}/>}\n              />\n\n              <Route\n                exact\n                path='/add-note/'\n                render={(rprops) => <AddNote rprops={rprops} />}\n              />\n            </div>\n          </main>\n        </BrowserRouter>\n      </NotefulContext.Provider>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}